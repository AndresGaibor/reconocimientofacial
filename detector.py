# detector.py

from collections import Counter
from pathlib import Path
import pickle

from PIL import Image, ImageDraw
import face_recognition

import base64
from io import BytesIO
import numpy as np


BOUNDING_BOX_COLOR = "blue"
TEXT_COLOR = "white"

DEFAULT_ENCODINGS_PATH = Path("output/encodings.pkl")

Path("training").mkdir(exist_ok=True)
Path("output").mkdir(exist_ok=True)
Path("validation").mkdir(exist_ok=True)

def encode_known_faces(
    model: str = "hog", encodings_location: Path = DEFAULT_ENCODINGS_PATH
) -> None:
    names = []
    encodings = []
    for filepath in Path("training").glob("*/*"):
        name = filepath.parent.name
        image = face_recognition.load_image_file(filepath)

        face_locations = face_recognition.face_locations(image, model=model)
        face_encodings = face_recognition.face_encodings(image, face_locations)

        for encoding in face_encodings:
            names.append(name)
            encodings.append(encoding)
    name_encodings = {"names": names, "encodings": encodings}
    with encodings_location.open(mode="wb") as f:
        pickle.dump(name_encodings, f)

encode_known_faces()
        
def _recognize_face(unknown_encoding, loaded_encodings):
    boolean_matches = face_recognition.compare_faces(
        loaded_encodings["encodings"], unknown_encoding
    )
    votes = Counter(
        name
        for match, name in zip(boolean_matches, loaded_encodings["names"])
        if match
    )
    if votes:
        return votes.most_common(1)[0][0]
    
def recognize_faces(
    image_location: str,
    model: str = "hog",
    encodings_location: Path = DEFAULT_ENCODINGS_PATH,
) -> None:
    with encodings_location.open(mode="rb") as f:
        loaded_encodings = pickle.load(f)

    input_image = face_recognition.load_image_file(image_location)

    input_face_locations = face_recognition.face_locations(
        input_image, model=model
    )
    input_face_encodings = face_recognition.face_encodings(
        input_image, input_face_locations
    )

    for _, unknown_encoding in zip(
        input_face_locations, input_face_encodings
    ):
        name = _recognize_face(unknown_encoding, loaded_encodings)

        if not name:
            name = "Unknown"
        return name
    return "Unknown"

def recognize_faces_base64(image_base64, model='hog', encodings_location=DEFAULT_ENCODINGS_PATH):
    # Decodifica la imagen base64 y la convierte en una imagen PIL
    image_data = base64.b64decode(image_base64)
    image = Image.open(BytesIO(image_data))
    
    # Convierte la imagen PIL a un array numpy para face_recognition
    np_image = np.array(image)

    # Carga las codificaciones conocidas
    with encodings_location.open(mode='rb') as f:
        loaded_encodings = pickle.load(f)

    # Encuentra las ubicaciones de las caras y sus codificaciones en la imagen
    face_locations = face_recognition.face_locations(np_image, model=model)
    face_encodings = face_recognition.face_encodings(np_image, face_locations)

    # Reconoce las caras
    namefound = "No reconocido"
    for unknown_encoding in face_encodings:
        name = _recognize_face(unknown_encoding, loaded_encodings)
        if name:
            namefound = name;
            

    # Si no se encuentra ninguna cara, retorna 'Unknown'
    print("Consulta de ", namefound);
    
    return namefound


def validate(model: str = "hog"):
    for filepath in Path("validation").rglob("*"):
        if filepath.is_file():
            recognize_faces(
                image_location=str(filepath.absolute()), model=model
            )

# validate()
resultado = recognize_faces("unknown3.jpeg")
print(resultado);
# resultado = recognize_faces_base64("")
# print(resultado)

# from typing import Union

# from fastapi import FastAPI